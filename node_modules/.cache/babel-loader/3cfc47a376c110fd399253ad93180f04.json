{"ast":null,"code":"import { useRef, useState, useEffect, useMemo } from 'react';\n\nfunction useResizeObserver(opts) {\n  if (opts === void 0) {\n    opts = {};\n  } // `defaultRef` Has to be non-conditionally declared here whether or not it'll\n  // be used as that's how hooks work.\n  // @see https://reactjs.org/docs/hooks-rules.html#explanation\n\n\n  var defaultRef = useRef(null); // Saving the callback as a ref. With this, I don't need to put onResize in the\n  // effect dep array, and just passing in an anonymous function without memoising\n  // will not reinstantiate the hook's ResizeObserver\n\n  var onResize = opts.onResize;\n  var onResizeRef = useRef(undefined);\n  onResizeRef.current = onResize; // Using a single instance throughought the hook's lifetime\n\n  var resizeObserverRef = useRef();\n  var ref = opts.ref || defaultRef;\n\n  var _useState = useState({\n    width: undefined,\n    height: undefined\n  }),\n      size = _useState[0],\n      setSize = _useState[1]; // Using a ref to track the previous width / height to avoid unnecessary renders\n\n\n  var previous = useRef({\n    width: undefined,\n    height: undefined\n  });\n  useEffect(function () {\n    if (resizeObserverRef.current) {\n      return;\n    }\n\n    resizeObserverRef.current = new ResizeObserver(function (entries) {\n      if (!Array.isArray(entries)) {\n        return;\n      } // Since we only observe the one element, we don't need to loop over the\n      // array\n\n\n      if (!entries.length) {\n        return;\n      }\n\n      var entry = entries[0]; // `Math.round` is in line with how CSS resolves sub-pixel values\n\n      var newWidth = Math.round(entry.contentRect.width);\n      var newHeight = Math.round(entry.contentRect.height);\n\n      if (previous.current.width !== newWidth || previous.current.height !== newHeight) {\n        var newSize = {\n          width: newWidth,\n          height: newHeight\n        };\n\n        if (onResizeRef.current) {\n          onResizeRef.current(newSize);\n        } else {\n          previous.current.width = newWidth;\n          previous.current.height = newHeight;\n          setSize(newSize);\n        }\n      }\n    });\n  }, []);\n  useEffect(function () {\n    if (typeof ref !== \"object\" || ref === null || !(ref.current instanceof Element)) {\n      return;\n    }\n\n    var element = ref.current;\n    resizeObserverRef.current.observe(element);\n    return function () {\n      return resizeObserverRef.current.unobserve(element);\n    };\n  }, [ref]);\n  return useMemo(function () {\n    return {\n      ref: ref,\n      width: size.width,\n      height: size.height\n    };\n  }, [ref, size ? size.width : null, size ? size.height : null]);\n}\n\nexport default useResizeObserver;","map":{"version":3,"sources":["C:/Users/HP5CD/OneDrive/Desktop/dashboard/wibe-studio-starter-files/node_modules/use-resize-observer/dist/bundle.esm.js"],"names":["useRef","useState","useEffect","useMemo","useResizeObserver","opts","defaultRef","onResize","onResizeRef","undefined","current","resizeObserverRef","ref","_useState","width","height","size","setSize","previous","ResizeObserver","entries","Array","isArray","length","entry","newWidth","Math","round","contentRect","newHeight","newSize","Element","element","observe","unobserve"],"mappings":"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","sourcesContent":["import { useRef, useState, useEffect, useMemo } from 'react';\n\nfunction useResizeObserver(opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  // `defaultRef` Has to be non-conditionally declared here whether or not it'll\n  // be used as that's how hooks work.\n  // @see https://reactjs.org/docs/hooks-rules.html#explanation\n  var defaultRef = useRef(null); // Saving the callback as a ref. With this, I don't need to put onResize in the\n  // effect dep array, and just passing in an anonymous function without memoising\n  // will not reinstantiate the hook's ResizeObserver\n\n  var onResize = opts.onResize;\n  var onResizeRef = useRef(undefined);\n  onResizeRef.current = onResize; // Using a single instance throughought the hook's lifetime\n\n  var resizeObserverRef = useRef();\n  var ref = opts.ref || defaultRef;\n\n  var _useState = useState({\n    width: undefined,\n    height: undefined\n  }),\n      size = _useState[0],\n      setSize = _useState[1]; // Using a ref to track the previous width / height to avoid unnecessary renders\n\n\n  var previous = useRef({\n    width: undefined,\n    height: undefined\n  });\n  useEffect(function () {\n    if (resizeObserverRef.current) {\n      return;\n    }\n\n    resizeObserverRef.current = new ResizeObserver(function (entries) {\n      if (!Array.isArray(entries)) {\n        return;\n      } // Since we only observe the one element, we don't need to loop over the\n      // array\n\n\n      if (!entries.length) {\n        return;\n      }\n\n      var entry = entries[0]; // `Math.round` is in line with how CSS resolves sub-pixel values\n\n      var newWidth = Math.round(entry.contentRect.width);\n      var newHeight = Math.round(entry.contentRect.height);\n\n      if (previous.current.width !== newWidth || previous.current.height !== newHeight) {\n        var newSize = {\n          width: newWidth,\n          height: newHeight\n        };\n\n        if (onResizeRef.current) {\n          onResizeRef.current(newSize);\n        } else {\n          previous.current.width = newWidth;\n          previous.current.height = newHeight;\n          setSize(newSize);\n        }\n      }\n    });\n  }, []);\n  useEffect(function () {\n    if (typeof ref !== \"object\" || ref === null || !(ref.current instanceof Element)) {\n      return;\n    }\n\n    var element = ref.current;\n    resizeObserverRef.current.observe(element);\n    return function () {\n      return resizeObserverRef.current.unobserve(element);\n    };\n  }, [ref]);\n  return useMemo(function () {\n    return {\n      ref: ref,\n      width: size.width,\n      height: size.height\n    };\n  }, [ref, size ? size.width : null, size ? size.height : null]);\n}\n\nexport default useResizeObserver;\n"]},"metadata":{},"sourceType":"module"}